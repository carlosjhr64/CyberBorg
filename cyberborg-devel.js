// Generated by CoffeeScript 1.4.0
var AI, Ai, BASE, CORDER_PASS, Command, CyberBorg, DERRICKS, DORDER_MAINTAIN, FACTORIES, FORDER_MANUFACTURE, GROUPS, Gotcha, Group, Groups, IS_LAIDOFF, LABS, LORDER_RESEARCH, Location, SCOUTS, Scouter, Trace, WZArray, WZObject, eventChat, eventDestroyed, eventDroidBuilt, eventDroidIdle, eventResearched, eventStartLevel, eventStructureBuilt,
  __slice = [].slice;

Number.prototype.times = function(action) {
  var i, _results;
  i = 0;
  _results = [];
  while (i < this.valueOf()) {
    action();
    _results.push(i++);
  }
  return _results;
};

Number.prototype.to_i = function() {
  return parseInt(this.toFixed(0));
};

Number.prototype.order_map = function() {
  return CyberBorg.ORDER_MAP[this];
};

Trace = (function() {

  function Trace() {}

  Trace.on = selectedPlayer === me;

  Trace.out = function(message) {
    if (Trace.on) {
      return debug(message);
    }
  };

  Trace.red = function(message) {
    var previous_state;
    previous_state = Trace.on;
    if (Trace.on || (selectedPlayer === me)) {
      Trace.on = true;
      this.out("\u001b[1;31m" + message + "\u001b[0m");
    }
    return Trace.on = previous_state;
  };

  Trace.green = function(message) {
    if (Trace.on) {
      return this.out("\u001b[1;32m" + message + "\u001b[0m");
    }
  };

  Trace.blue = function(message) {
    if (Trace.on) {
      return this.out("\u001b[1;34m" + message + "\u001b[0m");
    }
  };

  return Trace;

})();

Location = (function() {
  /* CONSTRUCTOR
  */

  function Location() {
    this.position = {};
  }

  Location.prototype.picked = function(at, position) {
    var key;
    key = "" + at.x + "." + at.y;
    if (position) {
      this.position[key] = position;
    }
    return this.position[key];
  };

  Location.location = new Location();

  Location.picked = function(at, position) {
    return this.location.picked(at, position);
  };

  return Location;

})();

WZObject = (function() {

  WZObject.location = new Location();

  function WZObject(object) {
    this.copy(object);
    this.is_wzobject = true;
  }

  WZObject.prototype.copy = function(object) {
    var key, _results;
    this.game_time = gameTime;
    this.corder = IS_LAIDOFF;
    this.dorder = IS_LAIDOFF;
    _results = [];
    for (key in object) {
      _results.push(this[key] = object[key]);
    }
    return _results;
  };

  WZObject.prototype.update = function() {
    var obj, order;
    obj = objFromId(this);
    this.x = obj.x;
    this.y = obj.y;
    this.selected = obj.selected;
    this.health = obj.health;
    order = obj.order;
    if (order != null) {
      return this.order = order;
    }
  };

  WZObject.prototype.namexy = function() {
    return "" + this.name + "(" + this.x + "," + this.y + ")";
  };

  WZObject.prototype.position = function() {
    return {
      x: this.x,
      y: this.y
    };
  };

  WZObject.prototype.is_truck = function() {
    return CyberBorg.is_truck(this);
  };

  WZObject.prototype.is_weapon = function() {
    return CyberBorg.is_weapon(this);
  };

  WZObject.prototype.move_to = function(at, order) {
    if (order == null) {
      order = DORDER_MOVE;
    }
    if (droidCanReach(this, at.x, at.y)) {
      orderDroidLoc(this, order, at.x, at.y);
      this.order = order;
      return true;
    }
    return false;
  };

  WZObject.prototype.repair_structure = function(built) {
    if (built.health < 99) {
      if (orderDroidObj(this, DORDER_REPAIR, built)) {
        this.order = DORDER_REPAIR;
        return true;
      } else {
        return false;
      }
    }
    return this.move_to(built);
  };

  WZObject.prototype.pick_struct_location = function(structure, at) {
    var pos;
    if (structure === 'A0ResourceExtractor') {
      return at;
    }
    pos = Location.picked(at);
    if (!pos) {
      pos = pickStructLocation(this, structure, at.x, at.y);
      if (pos) {
        Location.picked(at, pos);
        if (!(pos.x === at.x && pos.y === at.y)) {
          Trace.red(("Game AI moved build " + structure + " ") + ("from " + at.x + "," + at.y + " to " + pos.x + "," + pos.y));
        }
      }
    }
    return pos;
  };

  WZObject.prototype.build_structure = function(structure, at) {
    var pos;
    if (pos = this.pick_struct_location(structure, at)) {
      if (orderDroidBuild(this, DORDER_BUILD, structure, pos.x, pos.y, at.direction)) {
        this.order = DORDER_BUILD;
        return true;
      }
    }
    return false;
  };

  WZObject.prototype.maintain_structure = function(structure, at) {
    var built;
    if (built = GROUPS.structure_at(at)) {
      return this.repair_structure(built);
    }
    return this.build_structure(structure, at);
  };

  WZObject.prototype.pursue_research = function(research) {
    if (pursueResearch(this, research)) {
      this.researching = research;
      this.order = LORDER_RESEARCH;
      return true;
    }
    return false;
  };

  WZObject.prototype.build_droid = function(command) {
    if (buildDroid(this, command.name, command.body, command.propulsion, "", command.droid_type, command.turret)) {
      this.order = FORDER_MANUFACTURE;
      return true;
    }
    return false;
  };

  WZObject.prototype.executes = function(command) {
    var at, ok, order;
    order = command.order;
    at = command.at;
    ok = (function() {
      switch (order) {
        case DORDER_MAINTAIN:
          return this.maintain_structure(command.structure, at);
        case FORDER_MANUFACTURE:
          return this.build_droid(command);
        case LORDER_RESEARCH:
          return this.pursue_research(command.research);
        case DORDER_BUILD:
          return this.build_structure(command.structure, at);
        case DORDER_MOVE:
        case DORDER_SCOUT:
          return this.move_to(at, order);
        case CORDER_PASS:
          this.order = CORDER_PASS;
          return true;
        default:
          Trace.red("" + (order.order_map()) + ", #" + order + ", un-implemented.");
          return false;
      }
    }).call(this);
    if (ok) {
      this.corder = command.order;
      this.dorder = this.order;
      this.command_time = gameTime;
    }
    return ok;
  };

  return WZObject;

})();

/* ***Array***
*/


Array.prototype.first = function() {
  return this[0];
};

Array.prototype.last = function() {
  return this[this.length - 1];
};

Array.prototype.shuffle = function() {
  return this.sort(function() {
    return 0.5 - Math.random();
  });
};

/* ***WZArray***
*/


WZArray = (function() {

  function WZArray() {}

  WZArray.INIT = -1;

  WZArray.NONE = -1;

  /* METRICS
  */


  WZArray.distance_metric = function(a, b) {
    var x, y;
    x = a.x - b.x;
    y = a.y - b.y;
    return x * x + y * y;
  };

  WZArray.nearest_metric = function(a, b, at) {
    return WZArray.distance_metric(a, at) - WZArray.distance_metric(b, at);
  };

  WZArray.bless = function(array) {
    var method, name, _ref;
    if (array.is_wzarray) {
      Trace.red("Warning: WZArray re'bless'ing");
      return array;
    }
    _ref = WZArray.prototype;
    for (name in _ref) {
      method = _ref[name];
      array[name] = method;
    }
    array.is_wzarray = true;
    return array;
  };

  /* SORTS
  */


  WZArray.prototype.nearest = function(at) {
    return this.sort(function(a, b) {
      return WZArray.nearest_metric(a, b, at);
    });
  };

  /* QUERIES
  */


  WZArray.prototype.indexOfObject = function(object) {
    var i, id;
    id = object.id;
    i = 0;
    while (i < this.length) {
      if (this[i].id === id) {
        return i;
      }
      i++;
    }
    return WZArray.NONE;
  };

  WZArray.prototype.contains = function(object) {
    return this.indexOfObject(object) > WZArray.NONE;
  };

  WZArray.prototype.removeObject = function(object) {
    var i;
    i = this.indexOfObject(object);
    if (i > WZArray.NONE) {
      this.splice(i, 1);
    }
    return i;
  };

  /* FILTERS
  */


  WZArray.prototype.filters = function(type) {
    return WZArray.bless(this.filter(type));
  };

  WZArray.prototype.trucks = function() {
    return this.filters(CyberBorg.is_truck);
  };

  WZArray.prototype.weapons = function() {
    return this.filters(CyberBorg.is_weapon);
  };

  WZArray.prototype.factories = function() {
    return this.filters(CyberBorg.is_factory);
  };

  WZArray.prototype.not_built = function() {
    return this.filters(CyberBorg.is_not_built);
  };

  WZArray.prototype.not_in = function(group) {
    return this.filters(function(object) {
      return group.list.indexOfObject(object) === WZArray.NONE;
    });
  };

  WZArray.prototype["in"] = function(group) {
    return this.filters(function(object) {
      return group.list.indexOfObject(object) > WZArray.NONE;
    });
  };

  WZArray.prototype.in_cid = function(cid) {
    return this.filters(function(object) {
      var _ref;
      return ((_ref = object.command) != null ? _ref.cid : void 0) === cid;
    });
  };

  WZArray.prototype.like = function(rgx) {
    return this.filters(function(object) {
      return rgx.test(object.name);
    });
  };

  /* EDITS
  */


  WZArray.prototype.cap = function(n) {
    return WZArray.bless(this.slice(0, +(n - 1) + 1 || 9e9));
  };

  WZArray.prototype.add = function(arr) {
    return WZArray.bless(this.concat(arr));
  };

  /* SUMARIES
  */


  WZArray.prototype.counts = function(type) {
    var count, object, _i, _len;
    count = 0;
    for (_i = 0, _len = this.length; _i < _len; _i++) {
      object = this[_i];
      if (type(object)) {
        count += 1;
      }
    }
    return count;
  };

  WZArray.prototype.counts_named = function(name) {
    return this.counts(function(obj) {
      return obj.name === name;
    });
  };

  WZArray.prototype.counts_in_cid = function(cid) {
    return this.counts(function(obj) {
      var _ref;
      return ((_ref = obj.command) != null ? _ref.cid : void 0) === cid;
    });
  };

  WZArray.prototype.center = function() {
    var at, i, n;
    at = {
      x: 0,
      y: 0
    };
    n = this.length;
    i = 0;
    while (i < n) {
      at.x += this[i].x;
      at.y += this[i].y;
      i++;
    }
    at.x = at.x / n;
    at.y = at.y / n;
    return at;
  };

  WZArray.prototype.collision = function(at) {
    var object, _i, _len;
    for (_i = 0, _len = this.length; _i < _len; _i++) {
      object = this[_i];
      if (object.x === at.x && object.y === at.y) {
        return true;
      }
    }
    return false;
  };

  /* ACCESSING
  */


  WZArray.prototype.get_command = function(cid) {
    var command, _i, _len;
    for (_i = 0, _len = this.length; _i < _len; _i++) {
      command = this[_i];
      if (command.cid === cid) {
        return command;
      }
    }
    return null;
  };

  /* CURSOR
  */


  WZArray.prototype._current = WZArray.INIT;

  WZArray.prototype.current = function() {
    return this[this._current];
  };

  WZArray.prototype._next = function() {
    if (this._current < this.length) {
      this._current += 1;
    }
    return this._current;
  };

  WZArray.prototype.next = function() {
    return this[this._next()];
  };

  WZArray.prototype._previous = function() {
    if (this._current > WZArray.INIT) {
      this._current -= 1;
    }
    return this._current;
  };

  WZArray.prototype.revert = function() {
    return this._previous();
  };

  WZArray.prototype.previous = function() {
    return this[this._previous()];
  };

  return WZArray;

})();

/* ***Scouter***
*/


Scouter = (function() {

  function Scouter() {}

  Scouter.bless = function(array) {
    var method, name, _ref;
    if (array.is_scouter) {
      Trace.red("Warning: Scouter re'bless'ing");
      return array;
    }
    _ref = Scouter.prototype;
    for (name in _ref) {
      method = _ref[name];
      array[name] = method;
    }
    array.offset = 0;
    array.mod = this.length;
    array.index = WZArray.INIT;
    array.is_scouter = true;
    return array;
  };

  Scouter.prototype._set_current = function() {
    return this._current = this.offset + (this.index % this.mod);
  };

  Scouter.prototype._next = function() {
    this.index += 1;
    return this._set_current();
  };

  Scouter.prototype._previous = function() {
    if (this.index > -1) {
      this.index -= 1;
      return this._set_current();
    } else {
      return this._current = -1;
    }
  };

  return Scouter;

})();

/* ***Groups***
*/


Groups = (function() {

  function Groups() {}

  Groups.RESERVE = WZArray.bless([]);

  Groups.bless = function(array) {
    var method, name, _ref;
    if (array.is_groups) {
      Trace.red("Warning: Groups re'bless'ing");
      return array;
    }
    _ref = Groups.prototype;
    for (name in _ref) {
      method = _ref[name];
      array[name] = method;
    }
    array.is_groups = true;
    return array;
  };

  Groups.prototype.add_group = function() {
    var params;
    params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.push((function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Group, params, function(){}));
  };

  Groups.prototype.update = function() {
    var group, object, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _results;
    for (_i = 0, _len = this.length; _i < _len; _i++) {
      group = this[_i];
      _ref = group.list;
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        object = _ref[_j];
        if (object.game_time < gameTime) {
          object.update();
        }
      }
    }
    _ref1 = Groups.RESERVE;
    _results = [];
    for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
      object = _ref1[_k];
      if (object.game_time < gameTime) {
        _results.push(object.update());
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  Groups.prototype.for_all = function(test_of) {
    var group, list, object, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
    list = [];
    for (_i = 0, _len = this.length; _i < _len; _i++) {
      group = this[_i];
      _ref = group.list;
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        object = _ref[_j];
        if (test_of(object)) {
          list.push(object);
        }
      }
    }
    _ref1 = Groups.RESERVE;
    for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
      object = _ref1[_k];
      if (test_of(object)) {
        list.push(object);
      }
    }
    return WZArray.bless(list);
  };

  Groups.prototype.for_one = function(test_of) {
    var group, object, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
    for (_i = 0, _len = this.length; _i < _len; _i++) {
      group = this[_i];
      _ref = group.list;
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        object = _ref[_j];
        if (test_of(object)) {
          return {
            object: object,
            group: group
          };
        }
      }
    }
    _ref1 = Groups.RESERVE;
    for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
      object = _ref1[_k];
      if (test_of(object)) {
        return {
          object: object,
          group: {
            list: Groups.RESERVE
          }
        };
      }
    }
    return null;
  };

  Groups.prototype.find = function(target) {
    var _ref;
    return (_ref = this.for_one(function(object) {
      return object.id === target.id;
    })) != null ? _ref.object : void 0;
  };

  Groups.prototype.finds = function(target) {
    return this.for_one(function(object) {
      return object.id === target.id;
    });
  };

  Groups.prototype.structure_at = function(at) {
    var found, _ref;
    found = function(object) {
      return object.x === at.x && object.y === at.y && object.type === STRUCTURE;
    };
    return (_ref = this.for_one(found)) != null ? _ref.object : void 0;
  };

  Groups.prototype.get_command = function(cid) {
    var command, group, _i, _j, _len, _len1, _ref;
    for (_i = 0, _len = this.length; _i < _len; _i++) {
      group = this[_i];
      _ref = group.commands;
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        command = _ref[_j];
        if (command.cid === cid) {
          return command;
        }
      }
    }
    return null;
  };

  Groups.prototype.named = function(name) {
    var object, _i, _len;
    for (_i = 0, _len = this.length; _i < _len; _i++) {
      object = this[_i];
      if (object.name === name) {
        return object;
      }
    }
    return null;
  };

  return Groups;

})();

Group = (function() {

  Group.CID = 0;

  Group.cid = function() {
    return Group.CID += 1;
  };

  function Group(name, commands, group) {
    this.name = name;
    this.commands = commands != null ? commands : [];
    this.group = group != null ? group : [];
    if (!this.commands.is_wzarray) {
      WZArray.bless(this.commands);
    }
    if (!this.group.is_wzarray) {
      WZArray.bless(this.group);
    }
    this.list = this.group;
  }

  Group.prototype.add = function(droid) {
    if (Groups.RESERVE.contains(droid)) {
      Groups.RESERVE.removeObject(droid);
      return this.group.push(droid);
    } else {
      throw new Error("Can't add " + (droid.namexy()) + " b/c it's not in reserve.");
    }
  };

  Group.prototype.remove = function(droid) {
    if (this.group.contains(droid)) {
      this.group.removeObject(droid);
      return Groups.RESERVE.push(droid);
    } else {
      return Trace.red("Can't remove " + droid.name + " b/c it's not in group.");
    }
  };

  Group.prototype.layoffs = function(command) {
    var unit, _i, _len, _ref;
    if (command.cid != null) {
      _ref = this.group.in_cid(command.cid);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        unit = _ref[_i];
        this.remove(unit);
        unit.order = IS_LAIDOFF;
        unit.command = null;
      }
      return command.cid = null;
    } else {
      return Trace.red("Command without cid");
    }
  };

  Group.prototype.units = function(command) {
    var limit, max, min, size, units;
    min = command.min;
    limit = command.limit;
    size = this.group.length;
    if (size + min > limit) {
      return null;
    }
    units = Groups.RESERVE.like(command.like);
    if (units.length < min) {
      return null;
    }
    if (command.at) {
      units.nearest(command.at);
    }
    max = command.max;
    if (size + max > limit) {
      max = limit - size;
    }
    if (units.length > max) {
      units = units.cap(max);
    }
    return units;
  };

  Group.prototype.order_units = function(command) {
    var cid, count, unit, units, _i, _len;
    count = 0;
    if (units = this.units(command)) {
      cid = Group.cid();
      for (_i = 0, _len = units.length; _i < _len; _i++) {
        unit = units[_i];
        if (unit.executes(command)) {
          unit.command = command;
          this.add(unit);
          count += 1;
        }
      }
      if (count) {
        command.cid = cid;
      }
    }
    return count;
  };

  Group.prototype.execute = function(command) {
    var count;
    count = this.order_units(command);
    if (command.execute != null) {
      try {
        count = command.execute(this);
      } catch (error) {
        Trace.red(error);
        count = 0;
      }
    }
    return count;
  };

  return Group;

})();

CyberBorg = (function() {
  /* CONSTANTS
  */

  function CyberBorg() {}

  CyberBorg.NORTH = 0;

  CyberBorg.EAST = 90;

  CyberBorg.SOUTH = 180;

  CyberBorg.WEST = 270;

  CyberBorg.ORDER_MAP = ['DORDER_NONE', 'DORDER_STOP', 'DORDER_MOVE', 'DORDER_ATTACK', 'DORDER_BUILD', 'DORDER_HELPBUILD', 'DORDER_LINEBUILD', 'DORDER_DEMOLISH', 'DORDER_REPAIR', 'DORDER_OBSERVE', 'DORDER_FIRESUPPORT', 'DORDER_RETREAT', 'DORDER_DESTRUCT', 'DORDER_RTB', 'DORDER_RTR', 'DORDER_RUN', 'DORDER_EMBARK', 'DORDER_DISEMBARK', 'DORDER_ATTACKTARGET', 'DORDER_COMMANDERSUPPORT', 'DORDER_BUILDMODULE', 'DORDER_RECYCLE', 'DORDER_TRANSPORTOUT', 'DORDER_TRANSPORTIN', 'DORDER_TRANSPORTRETURN', 'DORDER_GUARD', 'DORDER_DROIDREPAIR', 'DORDER_RESTORE', 'DORDER_SCOUT', 'DORDER_RUNBURN', 'DORDER_UNUSED', 'DORDER_PATROL', 'DORDER_REARM', 'DORDER_RECOVER', 'DORDER_LEAVEMAP', 'DORDER_RTR_SPECIFIED', 'DORDER_CIRCLE', 'DORDER_HOLD', null, null, 'DORDER_CIRCLE', null, null, null, null, null, null, null, null, null, 'DORDER_MAINTAIN', 'FORDER_MANUFACTURE', 'LORDER_RESEARCH', 'CORDER_PASS', 'IS_LAIDOFF'];

  /* ENUMS
  */


  CyberBorg.enum_struct = function() {
    var array, params;
    params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    array = enumStruct.apply(null, params).map(function(object) {
      return new WZObject(object);
    });
    return WZArray.bless(array);
  };

  CyberBorg.enum_feature = function() {
    var array, params;
    params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    array = enumFeature.apply(null, params).map(function(object) {
      return new WZObject(object);
    });
    return WZArray.bless(array);
  };

  CyberBorg.enum_droid = function() {
    var array, params;
    params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    array = enumDroid.apply(null, params).map(function(object) {
      return new WZObject(object);
    });
    return WZArray.bless(array);
  };

  /* IS WUT???
  */


  CyberBorg.is_truck = function(droid) {
    return droid.droidType === DROID_CONSTRUCT;
  };

  CyberBorg.is_weapon = function(droid) {
    return droid.droidType === DROID_WEAPON;
  };

  CyberBorg.is_factory = function(structure) {
    return structure.stattype === FACTORY;
  };

  CyberBorg.is_resource = function(object) {
    return [OIL_RESOURCE, RESOURCE_EXTRACTOR].indexOf(object.stattype) > WZArray.NONE;
  };

  CyberBorg.is_not_built = function(structure) {
    return structure.status !== BUILT;
  };

  /* GETS
  */


  CyberBorg.get_resources = function(at) {
    return CyberBorg.enum_feature(ALL_PLAYERS, "OilResource").nearest(at);
  };

  CyberBorg.get_free_spots = function(at, n) {
    var i, j, list, pos, positions, x, y, _i, _j;
    if (n == null) {
      n = 1;
    }
    x = at.x;
    y = at.y;
    list = WZArray.bless(enumArea(x - n, y - n, x + n, y + n, ALL_PLAYERS, false));
    positions = [];
    for (i = _i = -n; -n <= n ? _i <= n : _i >= n; i = -n <= n ? ++_i : --_i) {
      for (j = _j = -n; -n <= n ? _j <= n : _j >= n; j = -n <= n ? ++_j : --_j) {
        pos = {
          x: x + i,
          y: y + j
        };
        if (!list.collision(pos)) {
          positions.push(pos);
        }
      }
    }
    return positions;
  };

  return CyberBorg;

})();

DORDER_MAINTAIN = CyberBorg.ORDER_MAP.indexOf('DORDER_MAINTAIN');

FORDER_MANUFACTURE = CyberBorg.ORDER_MAP.indexOf('FORDER_MANUFACTURE');

LORDER_RESEARCH = CyberBorg.ORDER_MAP.indexOf('LORDER_RESEARCH');

CORDER_PASS = CyberBorg.ORDER_MAP.indexOf('CORDER_PASS');

IS_LAIDOFF = CyberBorg.ORDER_MAP.indexOf('IS_LAIDOFF');

Command = (function() {

  Command.to_at = function(o) {
    return {
      x: o.x.to_i(),
      y: o.y.to_i()
    };
  };

  function Command(limit, savings) {
    this.limit = limit != null ? limit : 0;
    this.savings = savings != null ? savings : 0;
    this.tc = Command.to_at(Groups.RESERVE.trucks().center());
    if (Trace.on) {
      Trace.out("Trucks around " + this.tc.x + ", " + this.tc.y);
    }
    this.resources = CyberBorg.get_resources(this.tc);
    this.rc = Command.to_at(WZArray.bless(this.resources.slice(0, 4)).center());
    if (Trace.on) {
      Trace.out("Resources around " + this.rc.x + ", " + this.rc.y + ".");
    }
    this.dx = 1;
    if (this.tc.x > this.rc.x) {
      this.dx = -1;
    }
    this.dy = 1;
    if (this.tc.y > this.rc.y) {
      this.dy = -1;
    }
    this.s = 4;
    this.horizontal = false;
    if ((this.rc.x - this.tc.x) * this.dx > (this.rc.y - this.tc.y) * this.dy) {
      this.horizontal = true;
    }
    this.x = this.tc.x;
    this.y = this.tc.y;
  }

  /* Base Structures
  */


  Command.prototype.structure = function(structureid, cost, obj) {
    if (obj == null) {
      obj = {};
    }
    obj.structure = structureid;
    obj.cost = cost;
    return obj;
  };

  Command.prototype.command_center = function(obj) {
    if (obj == null) {
      obj = {};
    }
    return this.structure("A0CommandCentre", 100, obj);
  };

  Command.prototype.power_generator = function(obj) {
    if (obj == null) {
      obj = {};
    }
    return this.structure("A0PowerGenerator", 50, obj);
  };

  Command.prototype.power_module = function(obj) {
    if (obj == null) {
      obj = {};
    }
    return this.structure("A0PowMod1", 0, obj);
  };

  Command.prototype.research_facility = function(obj) {
    if (obj == null) {
      obj = {};
    }
    return this.structure("A0ResearchFacility", 100, obj);
  };

  Command.prototype.research_module = function(obj) {
    if (obj == null) {
      obj = {};
    }
    return this.structure("A0ResearchModule1", 100, obj);
  };

  Command.prototype.light_factory = function(obj) {
    if (obj == null) {
      obj = {};
    }
    return this.structure("A0LightFactory", 100, obj);
  };

  Command.prototype.factory_module = function(obj) {
    if (obj == null) {
      obj = {};
    }
    return this.structure("A0FacMod1", 100, obj);
  };

  Command.prototype.cyborg_factory = function(obj) {
    if (obj == null) {
      obj = {};
    }
    return this.structure("A0CyborgFactory", 100, obj);
  };

  Command.prototype.vtol_factory = function(obj) {
    if (obj == null) {
      obj = {};
    }
    return this.structure("A0VTolFactory1", 100, obj);
  };

  Command.prototype.command_relay_center = function(obj) {
    if (obj == null) {
      obj = {};
    }
    return this.structure("A0ComDroidControl", 100, obj);
  };

  Command.prototype.vtol_rearming_pad = function(obj) {
    if (obj == null) {
      obj = {};
    }
    return this.structure("A0VtolPad", 100, obj);
  };

  Command.prototype.repair_facility = function(obj) {
    if (obj == null) {
      obj = {};
    }
    return this.structure("A0RepairCentre3", 100, obj);
  };

  Command.prototype.oil_derrick = function(obj) {
    if (obj == null) {
      obj = {};
    }
    return this.structure("A0ResourceExtractor", 0, obj);
  };

  /* Defenses
  */


  /* Turrets
  */


  Command.prototype.trucker = function(obj) {
    if (obj == null) {
      obj = {};
    }
    obj.like = /Truck/;
    obj.name = "Truck";
    obj.turret = "Spade1Mk1";
    obj.droid_type = DROID_CONSTRUCT;
    return obj;
  };

  Command.prototype.gunner = function(obj) {
    if (obj == null) {
      obj = {};
    }
    obj.like = /Gun/;
    obj.name = "Gun";
    obj.turret = ["MG3Mk1", "MG2Mk1", "MG1Mk1"];
    obj.droid_type = DROID_WEAPON;
    return obj;
  };

  /* Cyborgs
  */


  /* Bodies
  */


  Command.prototype.body = function(bname, bodyid, cost, obj) {
    if (obj == null) {
      obj = {};
    }
    obj.body = bodyid;
    obj.bname = bname;
    obj.bcost = cost;
    return obj;
  };

  Command.prototype.viper = function(obj) {
    if (obj == null) {
      obj = {};
    }
    return this.body("Viper", "Body1REC", 30, obj);
  };

  Command.prototype.cobra = function(obj) {
    if (obj == null) {
      obj = {};
    }
    return this.body("Cobra", "Body5REC", 46, obj);
  };

  Command.prototype.python = function(obj) {
    if (obj == null) {
      obj = {};
    }
    return this.body("Python", "Body11ABT", 60, obj);
  };

  Command.prototype.bug = function(obj) {
    if (obj == null) {
      obj = {};
    }
    return this.body("Bug", "Body4ABT", 25, obj);
  };

  Command.prototype.scorpion = function(obj) {
    if (obj == null) {
      obj = {};
    }
    return this.body("Scorpion", "Body8MBT", 39, obj);
  };

  Command.prototype.mantis = function(obj) {
    if (obj == null) {
      obj = {};
    }
    return this.body("Mantis", "Body12SUP", 52, obj);
  };

  Command.prototype.leopard = function(obj) {
    if (obj == null) {
      obj = {};
    }
    return this.body("Leopard", "Body2SUP", 41, obj);
  };

  Command.prototype.panther = function(obj) {
    if (obj == null) {
      obj = {};
    }
    return this.body("Panther", "Body6SUPP", 57, obj);
  };

  Command.prototype.tiger = function(obj) {
    if (obj == null) {
      obj = {};
    }
    return this.body("Tiger", "Body9REC", 71, obj);
  };

  Command.prototype.retaliation = function(obj) {
    if (obj == null) {
      obj = {};
    }
    return this.body("Retaliation", "Body3MBT", 68, obj);
  };

  Command.prototype.retribution = function(obj) {
    if (obj == null) {
      obj = {};
    }
    return this.body("Retribution", "Body7ABT", 100, obj);
  };

  Command.prototype.vengeance = function(obj) {
    if (obj == null) {
      obj = {};
    }
    return this.body("Vengeance", "Body10MBT", 130, obj);
  };

  Command.prototype.wyvern = function(obj) {
    if (obj == null) {
      obj = {};
    }
    return this.body("Wyvern", "Body13SUP", 156, obj);
  };

  Command.prototype.dragon = function(obj) {
    if (obj == null) {
      obj = {};
    }
    return this.body("Dragon", "Body14SUP", 182, obj);
  };

  /* Propulsion
  */


  Command.prototype.wheeled = function(obj) {
    if (obj == null) {
      obj = {};
    }
    obj.propulsion = "wheeled01";
    return obj;
  };

  /* Research
  */


  /* Who?
  */


  Command.prototype.none = function(obj) {
    if (obj == null) {
      obj = {};
    }
    obj.like = /none/;
    obj.limit = 0;
    obj.min = 0;
    obj.max = 0;
    obj.help = 0;
    return obj;
  };

  Command.prototype.truck = function(obj) {
    if (obj == null) {
      obj = {};
    }
    obj.like = /Truck/;
    return obj;
  };

  Command.prototype.gun = function(obj) {
    if (obj == null) {
      obj = {};
    }
    obj.like = /Gun/;
    return obj;
  };

  Command.prototype.factory = function(obj) {
    if (obj == null) {
      obj = {};
    }
    obj.like = /Factory/;
    return obj;
  };

  /* Where?
  */


  Command.prototype.at = function(x, y, obj) {
    if (obj == null) {
      obj = {};
    }
    obj.at = {
      x: x,
      y: y
    };
    return obj;
  };

  /* Orders
  */


  Command.prototype.pursue = function(research, cost, obj) {
    if (obj == null) {
      obj = {};
    }
    obj.research = research;
    obj.order = LORDER_RESEARCH;
    obj.like = /Research Facility/;
    obj.power = 0;
    obj.cost = cost;
    obj.limit = this.limit;
    obj.min = 1;
    obj.max = 1;
    obj.help = 1;
    return obj;
  };

  Command.prototype.manufacture = function(obj) {
    var cost;
    if (obj == null) {
      obj = {};
    }
    cost = 100;
    if (obj.body && obj.propulsion && obj.turret) {
      cost = 100;
    }
    obj.order = FORDER_MANUFACTURE;
    obj.like = /Factory/;
    obj.cost = cost;
    return obj;
  };

  Command.prototype.maintain = function(obj) {
    if (obj == null) {
      obj = {};
    }
    if (this.savings > 0) {
      this.savings -= obj.cost;
    }
    obj.order = DORDER_MAINTAIN;
    obj.savings = this.savings;
    return obj;
  };

  Command.prototype.scout = function(obj) {
    if (obj == null) {
      obj = {};
    }
    obj.cost = 0;
    obj.order = DORDER_SCOUT;
    return obj;
  };

  Command.prototype.pass = function(obj) {
    if (obj == null) {
      obj = {};
    }
    obj.cost = 0;
    obj.order = CORDER_PASS;
    obj.execute = function(units) {
      return 1;
    };
    obj.cid = null;
    return obj;
  };

  /* How many?
  */


  Command.prototype.three = function(obj) {
    if (obj == null) {
      obj = {};
    }
    obj.limit = this.limit;
    obj.min = 1;
    obj.max = 3;
    obj.help = 0;
    return obj;
  };

  Command.prototype.two = function(obj) {
    if (obj == null) {
      obj = {};
    }
    obj.limit = this.limit;
    obj.min = 1;
    obj.max = 2;
    obj.help = 0;
    return obj;
  };

  Command.prototype.one = function(obj) {
    if (obj == null) {
      obj = {};
    }
    obj.limit = this.limit;
    obj.min = 1;
    obj.max = 1;
    obj.help = 0;
    return obj;
  };

  Command.prototype.with_help = function(obj) {
    if (obj == null) {
      obj = {};
    }
    obj.help = 3;
    return obj;
  };

  /* Power requirements
  */


  Command.prototype.immediately = function(obj) {
    if (obj == null) {
      obj = {};
    }
    obj.power = null;
    return obj;
  };

  Command.prototype.on_income = function(obj) {
    if (obj == null) {
      obj = {};
    }
    obj.power = -obj.cost / 2;
    return obj;
  };

  Command.prototype.on_budget = function(obj) {
    if (obj == null) {
      obj = {};
    }
    obj.power = 0;
    return obj;
  };

  Command.prototype.on_surplus = function(obj) {
    if (obj == null) {
      obj = {};
    }
    obj.power = obj.cost;
    return obj;
  };

  Command.prototype.on_glut = function(obj) {
    if (obj == null) {
      obj = {};
    }
    obj.power = 3 * obj.cost;
    return obj;
  };

  return Command;

})();

/* Aliases
*/


Command.prototype.maintains = Command.prototype.maintain;

Command.prototype.manufactures = Command.prototype.manufacture;

Command.prototype.trucks = Command.prototype.truck;

Command.prototype.scouts = Command.prototype.scout;

Gotcha = (function() {

  function Gotcha(ai) {
    this.ai = ai;
  }

  Gotcha.prototype.start = function(event) {
    var droid, research, structure;
    Trace.out("Power level: " + this.ai.power + " in " + event.name);
    if (structure = event.structure) {
      Trace.out("\t" + (structure.namexy()) + "\tCost: " + structure.cost);
    }
    if (research = event.research) {
      Trace.out("\t" + event.research.name + "\tCost: " + research.power);
    }
    if (droid = event.droid) {
      return Trace.out("\t" + (droid.namexy()) + "\tID:" + droid.id + "\tCost: " + droid.cost);
    }
  };

  Gotcha.prototype.command = function(command) {
    var at, key, keyvals;
    keyvals = [];
    for (key in command) {
      switch (key) {
        case 'at':
          at = command.at;
          keyvals.push("" + key + ":{" + at.x + "," + at.y + "}");
          break;
        case 'execute':
          keyvals.push("execute:->");
          break;
        default:
          keyvals.push("" + key + ":" + command[key]);
      }
    }
    return Trace.blue(keyvals.sort().join(' '));
  };

  Gotcha.prototype.bug_report = function(label, droid, event) {
    var at, command, corder, dorder, group, object, order, _ref;
    order = droid.order;
    dorder = droid.dorder;
    Trace.out("" + label + ":\t" + (droid.namexy()) + "\tid:" + droid.id + "\t");
    Trace.out("\t\tevent: " + event.name);
    Trace.out("\t\torder: " + order + " => " + (order.order_map()));
    Trace.out("\t\tdorder: " + dorder + " => " + (dorder.order_map()));
    if (command = droid.command) {
      corder = command.order;
      Trace.out("\t\t" + (corder.order_map()) + "\t#" + corder + "\tcid:" + command.cid);
      if (command.structure) {
        Trace.out("\t\tstructure:" + command.structure);
      }
      if (at = command.at) {
        Trace.out("\t\tat:(" + at.x + "," + at.y + ")");
      }
      if (order === 0) {
        Trace.out("\t\tBUG: Quitter.");
      } else {
        if (order !== droid.dorder) {
          Trace.out("\t\tBUG: Order changed.");
        }
      }
    }
    if (event.name === 'Destroyed') {
      group = (_ref = event.group) != null ? _ref.name : void 0;
      object = event.object.namexy();
      return Trace.out("\t\t" + group + "'s " + object + " destroyed.");
    }
  };

  Gotcha.prototype.working = function(droid, command) {
    var order;
    if (command == null) {
      command = droid.command;
    }
    if (Trace.on) {
      centreView(droid.x, droid.y);
    }
    if (droid.executes(command)) {
      order = command.order;
      if (Trace.on) {
        return Trace.green("\tRe-issued " + ("" + (order.order_map()) + ", #" + order + ", to " + droid.name + "."));
      }
    } else {
      return Trace.red("\t" + droid.name + " is a lazy bum!");
    }
  };

  Gotcha.prototype.selected = function(event) {
    var count, droid, _i, _len, _ref;
    count = 0;
    _ref = GROUPS.for_all(function(object) {
      return object.selected;
    });
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      droid = _ref[_i];
      count += 1;
      if (Trace.on) {
        this.bug_report("Selected", droid, event);
      }
    }
    return count;
  };

  Gotcha.prototype.idle = function(event) {
    var count, droid, is_quitter, _i, _len, _ref;
    count = 0;
    is_quitter = function(object) {
      return object.order === 0 && (object.command != null);
    };
    _ref = GROUPS.for_all(is_quitter);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      droid = _ref[_i];
      count += 1;
      if (Trace.on) {
        this.bug_report("Quitter", droid, event);
      }
      this.working(droid);
    }
    return count;
  };

  Gotcha.prototype.rogue = function(event) {
    var command, corder, count, dorder, droid, order, rogue, _i, _len, _ref, _ref1, _ref2;
    count = 0;
    rogue = function(object) {
      if (object.command != null) {
        if (!((object.order === 0) || (object.order === object.dorder))) {
          return true;
        }
      }
      return false;
    };
    _ref = GROUPS.for_all(function(object) {
      return rogue(object);
    });
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      droid = _ref[_i];
      count += 1;
      if (Trace.on) {
        this.bug_report("Rogue", droid, event);
      }
      command = droid.command;
      if ((command != null ? command.order : void 0) === 28) {
        if (Trace.on) {
          centreView(droid.x, droid.y);
        }
        this.working(droid, command);
      } else {
        order = droid.order.order_map();
        Trace.red("\tUncaught rogue case: " + (droid.namexy()) + " " + order + ".");
        dorder = (_ref1 = droid.dorder) != null ? _ref1.order_map() : void 0;
        corder = (_ref2 = droid.corder) != null ? _ref2.order_map() : void 0;
        Trace.red("\t\tWanted " + corder + " => " + dorder + ".");
      }
    }
    return count;
  };

  Gotcha.prototype.end = function(event) {
    var count, counts;
    counts = count = 0;
    if (count = this.selected(event) && Trace.on) {
      counts += count;
      Trace.out("");
    }
    if (count = this.idle(event) && Trace.on) {
      counts += count;
      Trace.out("");
    }
    if (count = this.rogue(event) && Trace.on) {
      counts += count;
      Trace.out("");
    }
    if (Trace.on && counts) {
      return Trace.out("");
    }
  };

  return Gotcha;

})();

Ai = (function() {

  function Ai() {
    this.hq = false;
    this.power = null;
    this.stalled = [];
    this.gotcha = new Gotcha(this);
  }

  Ai.prototype.update = function(event) {
    this.power = playerPower(me);
    GROUPS.update();
    if (Trace.on) {
      return this.gotcha.start(event);
    }
  };

  Ai.prototype.switches = function(event) {
    switch (event.name) {
      case 'StartLevel':
        return this.startLevel();
      case 'StructureBuilt':
        return this.structureBuilt(event.structure, event.droid, event.group);
      case 'DroidBuilt':
        return this.droidBuilt(event.droid, event.structure, event.group);
      case 'DroidIdle':
        return this.droidIdle(event.droid, event.group);
      case 'Researched':
        return this.researched(event.research, event.structure, event.group);
      case 'Destroyed':
        return this.destroyed(event.object, event.group);
      case 'Chat':
        return this.chat(event.sender, event.to, event.message);
      default:
        return Trace.red("" + event.name + " NOT HANDLED!");
    }
  };

  Ai.prototype.events = function(event) {
    this.update(event);
    this.switches(event);
    this.group_executions(event);
    return this.gotcha.end(event);
  };

  Ai.prototype.startLevel = function() {
    var droid, _i, _len, _ref;
    _ref = CyberBorg.enum_droid();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      droid = _ref[_i];
      Groups.RESERVE.push(droid);
    }
    return this.script();
  };

  Ai.prototype.structureBuilt = function(structure, droid, group) {
    if (droid.command) {
      group.layoffs(droid.command);
    }
    Groups.RESERVE.push(structure);
    if (structure.type === STRUCTURE) {
      switch (structure.stattype) {
        case HQ:
          this.hq = true;
      }
    }
    return this.helping(droid);
  };

  Ai.prototype.destroyed = function(object, group) {
    if (object.player === me && object.type === STRUCTURE) {
      switch (object.stattype) {
        case HQ:
          return this.hq = false;
      }
    }
  };

  Ai.prototype.droidBuilt = function(droid, structure, group) {
    if (structure != null ? structure.command : void 0) {
      group.layoffs(structure.command);
    }
    Groups.RESERVE.push(droid);
    return this.helping(droid);
  };

  Ai.prototype.helping = function(unit) {
    var cid, command, employed, group, help_wanted, _i, _len;
    for (_i = 0, _len = GROUPS.length; _i < _len; _i++) {
      group = GROUPS[_i];
      command = group.commands.current();
      cid = command != null ? command.cid : void 0;
      if (cid && (help_wanted = command.help) && command.like.test(unit.name)) {
        employed = group.list.counts_in_cid(cid);
        if (employed < help_wanted && unit.executes(command)) {
          unit.command = command;
          group.add(unit);
          return true;
        }
      }
    }
    return false;
  };

  Ai.prototype.chat = function(sender, to, message) {
    var words;
    words = message.split(/\s+/);
    if (sender === me) {
      switch (words[0]) {
        case 'report':
          return this.report(words[1]);
        case 'reload':
          return include("multiplay/skirmish/cyberborg-reloads.js");
        case 'trace':
          if (Trace.on) {
            Trace.green("Tracing off.");
          }
          Trace.on = !Trace.on;
          if (Trace.on) {
            return Trace.green("Tracing on.");
          }
          break;
        default:
          return console("What?");
      }
    }
  };

  Ai.prototype.report = function(who) {
    var droid, empty, list, _i, _len, _ref, _ref1, _ref2, _ref3;
    if (who === 'Reserve') {
      list = Groups.RESERVE;
    } else {
      list = (_ref = GROUPS.named(who)) != null ? _ref.list : void 0;
    }
    if (list) {
      empty = true;
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        droid = list[_i];
        empty && (empty = false);
        console(("" + (droid.namexy()) + " ") + ("corder:" + ((_ref1 = droid.corder) != null ? _ref1.order_map() : void 0) + " ") + ("dorder:" + ((_ref2 = droid.dorder) != null ? _ref2.order_map() : void 0) + " ") + ("order:" + ((_ref3 = droid.order) != null ? _ref3.order_map() : void 0) + " ") + ("health:" + droid.health + "%"));
      }
      if (empty) {
        return console("Group currently empty.");
      }
    } else {
      return console("There is not group " + who);
    }
  };

  Ai.prototype.researched = function(completed, structure, group) {
    var command, research;
    if (structure) {
      completed = completed.name;
      research = structure.researching;
      command = structure.command;
      if (research === completed) {
        return group.layoffs(command);
      } else {
        return this.stalled.push(structure);
      }
    }
  };

  Ai.prototype.droidIdle = function(droid, group) {
    if (droid.command) {
      group.layoffs(droid.command);
    }
    return this.helping(droid);
  };

  Ai.prototype.has = function(power) {
    if (power != null) {
      if (this.power >= power) {
        return true;
      }
      return false;
    }
    return true;
  };

  Ai.prototype.stalled_units = function() {
    var command, group, order, stalled, unit, _ref;
    stalled = [];
    while (unit = this.stalled.shift()) {
      command = unit.command;
      this.power -= command.cost;
      if (this.has(command.power)) {
        if (!unit.executes(command)) {
          order = command.order.order_map();
          Trace.red("" + unit.name + " could not execute " + order);
          if (command.research) {
            Trace.red("\t" + command.research);
          }
          if (group = (_ref = GROUPS.finds(unit)) != null ? _ref.group : void 0) {
            group.layoffs(command);
          }
        }
      } else {
        stalled.push(unit);
      }
    }
    return this.stalled = stalled;
  };

  Ai.prototype.group_executions = function(event) {
    var command, commands, group, name, _i, _len;
    for (_i = 0, _len = GROUPS.length; _i < _len; _i++) {
      group = GROUPS[_i];
      name = group.name;
      if (!(this.hq || this.base_group(name))) {
        continue;
      }
      commands = group.commands;
      while (command = commands.next()) {
        if (!(this.hq || this.allowed_hqless(command))) {
          break;
        }
        this.power -= command.cost;
        if (!(this.has(command.power) && group.execute(command))) {
          if (command.savings != null) {
            this.power -= command.savings;
          }
          commands.revert();
          break;
        }
        if (Trace.on) {
          this.gotcha.command(command);
        }
      }
    }
    return this.stalled_units();
  };

  return Ai;

})();

/*
 Here I have here listed all of the events documented by
 the JS API as of 2013-01-09.  The ones not used are commented out.
 See:
   https://warzone.atlassian.net/wiki/display/jsapi/API
 Preliminary data wrapping into either WZArray or WZObject occurs here.
*/


GROUPS = Groups.bless([]);

AI = new Ai();

eventChat = function(sender, to, message) {
  var obj;
  obj = {
    name: 'Chat',
    sender: sender,
    to: to,
    message: message
  };
  return AI.events(obj);
};

eventDestroyed = function(object) {
  var found, group, obj;
  if (object.name !== 'Oil Resource') {
    group = null;
    if (object.player === me && (found = GROUPS.finds(object))) {
      group = found.group;
      object = found.object;
      group.list.removeObject(object);
    } else {
      object = new WZObject(object);
    }
    obj = {
      name: 'Destroyed',
      object: object,
      group: group
    };
    return AI.events(obj);
  }
};

eventDroidBuilt = function(droid, structure) {
  var found, obj;
  found = GROUPS.finds(structure);
  obj = {
    name: 'DroidBuilt',
    droid: new WZObject(droid),
    structure: found.object,
    group: found.group
  };
  return AI.events(obj);
};

eventDroidIdle = function(droid) {
  var found, obj;
  found = GROUPS.finds(droid);
  obj = {
    name: 'DroidIdle',
    droid: found.object,
    group: found.group
  };
  return AI.events(obj);
};

eventResearched = function(research, structure) {
  var found, obj;
  found = GROUPS.finds(structure);
  obj = {
    name: 'Researched',
    research: research,
    structure: found != null ? found.object : void 0,
    group: found != null ? found.group : void 0
  };
  return AI.events(obj);
};

eventStartLevel = function() {
  var obj;
  obj = {
    name: 'StartLevel'
  };
  return AI.events(obj);
};

eventStructureBuilt = function(structure, droid) {
  var found, obj;
  found = GROUPS.finds(droid);
  obj = {
    name: 'StructureBuilt',
    structure: new WZObject(structure),
    droid: found.object,
    group: found.group
  };
  return AI.events(obj);
};

/*
eventAttacked = (victim, attacker) ->
  obj =
    name: 'Attacked'
    victim: new WZObject(victim)
    attacker: new WZObject(attacker)
  AI.events(obj)

eventAttackedUnthrottled = (victim, attacker) ->
  obj =
    name: 'Attacked'
    victim: new WZObject(victim)
    attacker: new WZObject(attacker)
  AI.events(obj)

eventBeacon = (x, y, sender, to, message) ->
  obj =
    name: 'Beacon'
    at: x:x, y:y
    sender: sender
    to: to
    message: message
  AI.events(obj)

eventBeaconRemoved = (sender, to) ->
  obj =
    name: 'BeaconReamoved'
    sender: sender
    to: to
  AI.events(obj)

eventCheatMode = (entered) ->
  obj =
    name: 'CheatMode'
    entered: entered
  AI.events(obj)

eventGameInit = () ->
  obj = name: 'GameInit'
  AI.events(obj)

eventGameLoaded = () ->
  obj = name: 'GameLoaded'
  AI.events(obj)

eventGameSaved = () ->
  obj = name: 'GameSaved'
  AI.events(obj)

eventGameSaving = () ->
  obj = name: 'GameSaving'
  AI.events(obj)

eventGroupLoss = (object, group, size) ->
  obj =
    name: 'GroupLoss'
    object: new WZObject(object)
    group: group
    size: size
  AI.events(obj)

eventLaunchTransporter = () ->
  obj = name: 'LaunchTransporter'
  AI.events(obj)

eventMissionTimeout = () ->
  obj = name: 'MissionTimeout'
  AI.events(obj)

eventObjectSeen = (sensor, object) ->
  obj =
    name: 'ObjectSeen'
    sensor: new WZObject(sensor)
    object: new WZObject(object)
  AI.events(obj)

eventObjectTransfer = () ->
  obj = name: 'ObjectTransfer'
  AI.events(obj)

eventPickup = () ->
  obj = name: 'Pickup'
  AI.events(obj)

eventReinforcementsArrived = () ->
  obj = name: 'ReinforcementArrived'
  AI.events(obj)

eventSelectionChange = (selected) ->
  selected = selected.map( (object) -> new WZObject(object) )
  selected = WZArray.bless(selected)
  obj =
    name: 'SelectionChange'
    selected: selected
  AI.events(obj)

eventStructureReady = (structure) ->
  obj =
    name: 'StructureReady'
    structure: new WZObject(structure)
  AI.events(obj)

eventVideoDone = () ->
  obj = name: 'VideoDone'
  AI.events(obj)
*/


BASE = 'Base';

FACTORIES = 'Factories';

LABS = 'Labs';

DERRICKS = 'Derricks';

SCOUTS = 'Scouts';

Ai.prototype.base_group = function(name) {
  var base, _i, _len, _ref;
  _ref = [BASE, FACTORIES, LABS];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    base = _ref[_i];
    if (name === base) {
      return true;
    }
  }
  return false;
};

Ai.prototype.allowed_hqless = function(command) {
  switch (command.order) {
    case FORDER_MANUFACTURE:
      if (command.droid_type === DROID_CONSTRUCT) {
        return true;
      }
      break;
    case LORDER_RESEARCH:
      if (!/Defense/.test(command.research)) {
        return true;
      }
      break;
    default:
      return true;
  }
  return false;
};

Ai.prototype.script = function() {
  var commands;
  commands = new Command();
  GROUPS.add_group(BASE, commands.base_commands());
  GROUPS.add_group(FACTORIES, commands.factory_commands());
  GROUPS.add_group(LABS, commands.lab_commands());
  GROUPS.add_group(DERRICKS, commands.derricks_commands());
  return GROUPS.add_group(SCOUTS, commands.scouts_commands());
};

Command.prototype.with_three_trucks = function(obj) {
  return this.with_help(this.immediately(this.three(this.trucks(this.maintain(obj)))));
};

Command.prototype.with_one_truck = function(obj) {
  return this.on_budget(this.one(this.truck(this.maintains(obj))));
};

Command.prototype.base_commands = function() {
  var commands, more;
  this.limit = 3;
  this.savings = 400;
  commands = [this.with_three_trucks(this.light_factory(this.at(this.x - this.s * this.dx, this.y - this.s * this.dy))), this.with_three_trucks(this.research_facility(this.at(this.x, this.y - this.s * this.dy))), this.with_three_trucks(this.command_center(this.at(this.x + this.s * this.dx, this.y - this.s * this.dy))), this.with_three_trucks(this.power_generator(this.at(this.x + this.s * this.dx, this.y)))];
  this.limit = 1;
  more = [this.on_surplus(this.one(this.truck(this.maintains(this.power_generator(this.at(this.x, this.y)))))), this.pass(this.on_glut(this.none())), this.on_budget(this.one(this.truck(this.maintains(this.research_facility(this.at(this.x - this.s * this.dx, this.y)))))), this.on_budget(this.one(this.truck(this.maintains(this.power_generator(this.at(this.x - this.s * this.dx, this.y + this.s * this.dy)))))), this.pass(this.on_glut(this.none())), this.on_budget(this.one(this.truck(this.maintains(this.research_facility(this.at(this.x, this.y + this.s * this.dy)))))), this.on_budget(this.one(this.truck(this.maintains(this.power_generator(this.at(this.x + this.s * this.dx, this.y + this.s * this.dy))))))];
  commands = commands.concat(more);
  if (this.horizontal) {
    more = [this.pass(this.on_glut(this.none())), this.with_one_truck(this.research_facility(this.at(this.x + 2 * this.s * this.dx, this.y + this.s * this.dy))), this.with_one_truck(this.power_generator(this.at(this.x + 2 * this.s * this.dx, this.y))), this.pass(this.on_glut(this.none())), this.with_one_truck(this.research_facility(this.at(this.x + 2 * this.s * this.dx, this.y - this.s * this.dy)))];
  } else {
    more = [this.pass(this.on_glut(this.none())), this.with_one_truck(this.research_facility(this.at(this.x + this.s * this.dx, this.y + 2 * this.s * this.dy))), this.with_one_truck(this.power_generator(this.at(this.x, this.y + 2 * this.s * this.dy))), this.pass(this.on_glut(this.none())), this.with_one_truck(this.research_facility(this.at(this.x - this.s * this.dx, this.y + 2 * this.s * this.dy)))];
  }
  commands = commands.concat(more);
  return WZArray.bless(commands);
};

Command.prototype.factory_commands = function() {
  var commands, gunner, truck;
  this.limit = 1;
  this.savings = 0;
  truck = this.on_budget(this.manufacture(this.wheeled(this.viper(this.trucker()))));
  gunner = this.on_budget(this.manufacture(this.wheeled(this.viper(this.gunner()))));
  commands = [];
  commands.push(truck);
  12..times(function() {
    return commands.push(gunner);
  });
  commands.push(truck);
  return WZArray.bless(commands);
};

Command.prototype.now_with_truck = function(obj) {
  return this.immediately(this.one(this.truck(this.maintains(obj))));
};

Command.prototype.derricks_commands = function() {
  var commands, derrick, _i, _len, _ref;
  this.limit = 3;
  this.savings = 0;
  commands = WZArray.bless([]);
  _ref = this.resources;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    derrick = _ref[_i];
    commands.push(this.now_with_truck(this.oil_derrick(this.at(derrick.x, derrick.y))));
  }
  Scouter.bless(commands);
  commands.mod = 8;
  commands.offset = 0;
  return commands;
};

Command.prototype.scouts_commands = function() {
  var commands, derrick, _i, _len, _ref;
  this.limit = 12;
  this.savings = 0;
  commands = WZArray.bless([]);
  _ref = this.resources;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    derrick = _ref[_i];
    commands.push(this.immediately(this.one(this.gun(this.scouts(this.at(derrick.x, derrick.y))))));
  }
  Scouter.bless(commands);
  commands.mod = 5;
  commands.offset = 3;
  return commands;
};

Command.prototype.lab_commands = function() {
  var commands;
  this.limit = 5;
  this.savings = 0;
  commands = [this.pursue('R-Wpn-MG1Mk1', 1), this.pursue('R-Wpn-MG2Mk1', 37), this.pursue('R-Struc-PowerModuleMk1', 37), this.pursue('R-Wpn-MG3Mk1', 75), this.pursue('R-Struc-RepairFacility', 75), this.pursue('R-Defense-Tower01', 18), this.pursue('R-Defense-WallTower02', 75), this.pursue('R-Defense-AASite-QuadMg1', 112), this.pursue('R-Vehicle-Body04', 75), this.pursue('R-Vehicle-Prop-VTOL', 100), this.pursue('R-Struc-VTOLFactory', 100), this.pursue('R-Wpn-Bomb01', 100)];
  return WZArray.bless(commands);
};
