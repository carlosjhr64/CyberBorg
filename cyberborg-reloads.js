// Generated by CoffeeScript 1.4.0
var Gotcha;

Gotcha = (function() {

  function Gotcha(ai) {
    this.ai = ai;
  }

  Gotcha.prototype.start = function(event) {
    var danger, droid, k, pos, research, structure, too_dangerous, _results;
    Trace.out(("*Power*: " + this.ai.power + "  Event: " + event.name + "  ") + ("Time: " + gameTime));
    if (structure = event.structure) {
      Trace.out("\t" + (structure.namexy()) + "\tCost: " + structure.cost);
    }
    if (research = event.research) {
      Trace.out("\t" + event.research.name + "\tCost: " + research.power);
    }
    if (droid = event.droid) {
      Trace.out("\t" + (droid.namexy()) + "\tID:" + droid.id + "\tCost: " + droid.cost);
    }
    pos = this.ai.location.positions;
    Trace.out("\tDanger areas:");
    too_dangerous = ai.too_dangerous();
    _results = [];
    for (k in pos) {
      danger = pos[k];
      if (danger > too_dangerous) {
        _results.push(Trace.out("\t\t" + k + "\t" + (danger.to_i())));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  Gotcha.prototype.command = function(command) {
    var at, key, keyvals;
    keyvals = [];
    for (key in command) {
      switch (key) {
        case 'at':
          at = command.at;
          keyvals.push("" + key + ":{" + at.x + "," + at.y + "}");
          break;
        case 'execute':
          keyvals.push("execute:->");
          break;
        default:
          keyvals.push("" + key + ":" + command[key]);
      }
    }
    return Trace.blue(keyvals.sort().join(' '));
  };

  Gotcha.prototype.bug_report = function(label, droid, event) {
    var at, command, corder, dorder, group, object, order, _ref;
    order = droid.order;
    dorder = droid.dorder;
    Trace.out(("" + label + ":\t" + (droid.namexy()) + "\t") + ("id:" + droid.id + "\thealth:" + droid.health));
    Trace.out("\tevent: " + event.name);
    if (order != null) {
      Trace.out("\torder: " + order + " => " + (order.order_map()));
    }
    if (dorder != null) {
      Trace.out("\tdorder: " + dorder + " => " + (dorder.order_map()));
    }
    if (command = droid.command) {
      corder = command.order;
      Trace.out("\t\t" + (corder != null ? corder.order_map() : void 0) + "\t#" + corder + "\tcid:" + command.cid);
      if (command.structure) {
        Trace.out("\t\tstructure:" + command.structure);
      }
      if (at = command.at) {
        Trace.out("\t\tat:(" + at.x + "," + at.y + ")");
      }
      if (order === 0) {
        Trace.out("\t\tBUG: Quitter.");
      } else {
        if (order !== droid.dorder) {
          Trace.out("\t\tBUG: Order changed.");
        }
      }
    }
    if (event.name === 'Destroyed') {
      group = (_ref = event.group) != null ? _ref.name : void 0;
      object = event.object.namexy();
      return Trace.out("\t\t" + group + "'s " + object + " destroyed.");
    }
  };

  Gotcha.prototype.working = function(droid, command) {
    var order;
    if (command == null) {
      command = droid.command;
    }
    if (droid.executes(command)) {
      order = command.order;
      if (Trace.on) {
        return Trace.blue("\tRe-issued " + ("" + (order.order_map()) + ", #" + order + ", to " + droid.name + "."));
      }
    } else {
      return Trace.red("\t" + droid.name + " is a lazy bum!");
    }
  };

  Gotcha.prototype.selected = function(event) {
    var count, droid, _i, _len, _ref;
    count = 0;
    _ref = GROUPS.for_all(function(object) {
      return object.selected;
    });
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      droid = _ref[_i];
      count += 1;
      if (Trace.on) {
        this.bug_report("Selected", droid, event);
      }
    }
    return count;
  };

  Gotcha.prototype.idle = function(event) {
    var count, droid, is_quitter, _i, _len, _ref;
    count = 0;
    is_quitter = function(object) {
      return object.order === 0 && (object.command != null);
    };
    _ref = GROUPS.for_all(is_quitter);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      droid = _ref[_i];
      count += 1;
      if (Trace.on) {
        this.bug_report("Quitter", droid, event);
      }
      this.working(droid);
    }
    return count;
  };

  Gotcha.routed = function(order) {
    return [0, DORDER_RTB, DORDER_RTR, DORDER_RECYCLE].indexOf(order) > WZArray.NONE;
  };

  Gotcha.prototype.rogue = function(event) {
    var command, corder, count, dorder, droid, order, rogue, _i, _len, _ref, _ref1, _ref2;
    count = 0;
    rogue = function(object) {
      var order;
      if (object.command != null) {
        order = object.order;
        if (!((order === object.dorder) || Gotcha.routed(order))) {
          return true;
        }
      }
      return false;
    };
    _ref = GROUPS.for_all(function(object) {
      return rogue(object);
    });
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      droid = _ref[_i];
      count += 1;
      if (Trace.on) {
        this.bug_report("Rogue", droid, event);
      }
      command = droid.command;
      if ((command != null ? command.order : void 0) === 28) {
        this.working(droid, command);
      } else {
        order = droid.order.order_map();
        Trace.red("\tUncaught rogue case: " + (droid.namexy()) + " " + order + ".");
        dorder = (_ref1 = droid.dorder) != null ? _ref1.order_map() : void 0;
        corder = (_ref2 = droid.corder) != null ? _ref2.order_map() : void 0;
        Trace.red("\t\tWanted " + corder + " => " + dorder + ".");
      }
    }
    return count;
  };

  Gotcha.prototype.end = function(event) {
    var count, counts;
    counts = count = 0;
    if (count = this.selected(event) && Trace.on) {
      counts += count;
      Trace.out("");
    }
    if (count = this.idle(event) && Trace.on) {
      counts += count;
      Trace.out("");
    }
    if (count = this.rogue(event) && Trace.on) {
      counts += count;
      Trace.out("");
    }
    if (Trace.on && counts) {
      return Trace.out("");
    }
  };

  return Gotcha;

})();
